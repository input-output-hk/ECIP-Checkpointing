* Binary Cache

Unless if you are looking for a rather expensive lap/desk heater, you
are probably off better leveraging the project 42 hydra binary cache
instead of rebuilding the whole world by yourself.

We'll need to setup both the general IOHK cache =hydra.iohk.io= and
the project42-specific one =hydra.project42.iohkdev.io=.

** On a NixOS Machine

You can setup these two extra substituters in your =configuration.nix=
machine description:

#+begin_src
nix = {
  binaryCachePublicKeys = [
    "hydra.project42.iohkdev.io-1:RgWYMSuGbLEc2x7lXFhywxb+s61bZSiigIHG3PTcRos="
    "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
    "hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ="
  ];
  binaryCaches = [
    "https://hydra.project42.iohkdev.io/"
    "https://hydra.iohk.io"
    "https://cache.nixos.org/"
  ];
  extraOptions = ''
    builders-use-substitutes = true
  '';
};
#+end_src

** On a Non-NixOS Machine

You need to setup the following substituers in your
=/etc/nix/nix.conf= nix configuration.

#+begin_src
substituters = https://hydra.project42.iohkdev.io/ https://hydra.iohk.io https://cache.nixos.org/
trusted-substituters = https://hydra.project42.iohkdev.io/ https://hydra.iohk.io https://cache.nixos.org
trusted-public-keys = hydra.project42.iohkdev.io-1:RgWYMSuGbLEc2x7lXFhywxb+s61bZSiigIHG3PTcRos= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
builders-use-substitutes = true
#+end_src

* Build the Project

To build =morpho-checkpoint-node=, run

#+begin_src sh
» nix build -f . morpho-checkpoint-node.components.exes.morpho-checkpoint-node
#+end_src

* Test the Project

We currently have three test suites. All these suites are ran by hydra
on each PR.

** Unit Tests
   These tests are mostly meant to be run interactively when working
   on the checkpoint node. They are pretty fast to complete (>5s).

   You can run those using:

   #+BEGIN_SRC
   cabal test morpho-checkpoint-node:test
   #+END_SRC

** State Machine Tests
   These tests are acting as integration tests. They'll require to
   spin up several morpho nodes and mocked mantis nodes. They are
   pretty long to run (~4 minutes), hence not really meant to be run
   very frequently.

   You can run those using:

   #+BEGIN_SRC
    cabal test morpho-checkpoint-node:state-machine-tests
   #+END_SRC

** Mantis Integration Tests
   Here, we are testing some Morpho node features directly against the
   Mantis node itself. These test require to have Mantis and its
   associated CLIs (incl. =signatureValidator=) in your =$PATH= when
   running them.

   The easiest way to add these to your =$PATH= is to enter the nix
   shell using the =nix-shell= command.

   You can run those using:

   #+BEGIN_SRC
    cabal test morpho-checkpoint-node:mantis-integration-tests
   #+END_SRC

* Code Formatting

We are using the =ormolu= formatter for the Haskell files, =cabal
format= for the cabal files.

The CI will reject any non-formatted PR, please make sure you properly
format your code before opening one.

You can use the pre-commit hook to automatically run the formatters
before comitting. You can enable the provided pre-commit hook by
running:

#+begin_src sh
cd $root_of_this_git_repo
ln -s $PWD/pre-commit .git/hooks/pre-commit
#+end_src

* Interactive Dev Env

To get a =nix-shell= populated with the appropriate haskell libs, and
incrementally build the project, run:

#+begin_src sh
» nix-shell
» cabal new-build morpho-checkpoint-node
#+end_src

You can use =ghcid= (included in the shell) to check for errors on
real time:

#+begin_src sh
» ghcid
#+end_src

A =hoogle= database has been populated with the project's
dependencies. You can query it using the =hoogle= CLI:

#+begin_src sh
» hoogle Protocol
#+end_src

* Update Niv Dependencies

If you want to update a niv dependency (contained in =nix/sources.json=), use:

#+begin_src sh
» nix-shell
» niv update $dep_name
#+end_src
